@page "/build"
@using System.IO
@inject IMediator Mediator
@inject IJSRuntime JsRuntime
@attribute [Authorize(Policy = Policies.IsUser)]
<h3>Build Merged Mod</h3>
@if (AvailableMods.Any())
{
    <Row>
        <Column ColumnSize="ColumnSize.Is6.OnFullHD.Is12.OnWidescreen">
            <ModSelection AvailableMods="@AvailableMods" OnModDisabled="@((mf) => OptionChecked(mf, false))" OnModEnabled="@((mf) => OptionChecked(mf, true))" />
        </Column>
        <Column ColumnSize="ColumnSize.Is6.OnFullHD.Is12.OnWidescreen">
            <div class="mod-params">
                <Accordion Style="max-height: 60vh;">
                    @foreach (var paramReqd in SortedMods.Where(m => m.Key.Parameters.Any()))
                    {
                        var paramMod = paramReqd.Key;
                        <Collapse Visible="true">
                            <CollapseHeader>
                                <Text Weight="TextWeight.Bold">@paramMod.GetLabel()</Text>
                                @* <Heading Size="HeadingSize.Is6">@paramMod.GetLabel()</Heading> *@
                            </CollapseHeader>
                            <CollapseBody>
                                @foreach (var param in paramMod.Parameters)
                                {
                                    <ParameterInput @bind-Value="@InputParameters[param.Id]" Parameter="@param" />
                                }
                            </CollapseBody>
                        </Collapse>
                    }
                </Accordion>
            </div>
        </Column>
        </Row>
            <Row>
        @if (ModPriority.Keys.Any())
        {
            <Column ColumnSize="ColumnSize.Is6.OnFullHD.Is8.OnWidescreen.Is12.OnTablet">
                <Card>
                    <CardHeader>Enabled Mods</CardHeader>
                    <CardBody Style="max-height: 60vh;">
                        <CardText>
                            You have enabled @ModPriority.Keys.Count mods to modify @GetEnabledFileCount files.
                            <ul class="list-group">
                                @foreach (var (enabledFile, priority) in ModPriority.OrderBy(d => d.Value))
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @{ var enabledMod = AvailableMods[enabledFile]; }
                                        <span>
                                            @enabledMod.GetLabel()
                                            @if (enabledMod.GetAllPatches().Any(ps => ps.Type == SubstitutionType.Before))
                                            {
                                                <FadeTooltip Text="This mod might overwrite other mods in your selection, regardless of order">
                                                    <Icon Name="IconName.ExclamationTriangle"/>
                                                </FadeTooltip>
                                                @*<Tooltip Placement="Placement.Right" Text="This mod might overwrite other mods in your selection, regardless of order"><Icon Name="IconName.ExclamationTriangle"/></Tooltip>*@
                                            }
                                        </span>
                                        @*@AvailableMods[enabledFile].GetLabel() (@Path.GetFileName(enabledFile))*@
                                        <Tooltip Text="Use the priority to fine-tune the order your mods are applied" Placement="Placement.Left">
                                            <Buttons>
                                                <Button Color="Color.Light" Clicked="() => OnChangePriority(enabledFile, true)"><Icon Name="IconName.AngleUp"/></Button>
                                                @* <Button Style="min-width: 48px;" Disabled="true" Color="Color.Dark"><Text Class="text-muted">@ModPriority[enabledFile]</Text></Button> *@
                                                <Button Color="Color.Light" Clicked="() => OnChangePriority(enabledFile, false)"><Icon Name="IconName.AngleDown"/></Button>
                                            </Buttons>
                                        </Tooltip>
                                    </li>
                                }
                            </ul>
                        </CardText>
                    </CardBody>
                </Card>
            </Column>
        }

    
        @if (ReadyToBuild)
        {

            <Column ColumnSize="ColumnSize.Is4.Is2.WithOffset.OnFullHD.Is4.OnWidescreen.Is12.OnTablet">
                <BuildAction BuildParameters="@InputParameters" Mods="@SortedMods" />
            </Column>
        }
    </Row>
}
else
{
    <Row Gutter=(32,16)>
        <Column ColumnSize="ColumnSize.Is8.Is2.WithOffset">
            <Container Style="margin-top: 1.5em;">
                <Alert Color="Color.Primary" Visible="true">
                    There are no mods currently available!
                </Alert>
            </Container>
        </Column>
    </Row>  
}


@code {
    private Dictionary<string, WingmanMod> AvailableMods { get; set; } = new Dictionary<string, WingmanMod>();
    private Dictionary<string, int> ModPriority { get; set; } = new Dictionary<string, int>();
    /*private List<KeyValuePair<string, int>> SortedMods
    {
        get
        {
            return ModPriority.OrderBy(d => d.Value).ToList();
        }
    }*/

    private Dictionary<WingmanMod, int> SortedMods
    {
        get { return ModPriority.OrderBy(d => d.Value).ToDictionary(k => AvailableMods[k.Key], v => v.Value); }
    }

    private SafeDictionary<string, string> InputParameters { get; set; } = new SafeDictionary<string, string>(string.Empty);
    
    [CascadingParameter(Name = "SnackbarStack")] 
    SnackbarStack snackbarStack { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool ReadyToBuild => this.ModPriority.Keys.Any();
    /*private FileInfo ResultFile { get; set; }
    private bool AutoPack {get;set;} = true;
    private bool IsBuilding { get; set; }*/

    protected override async Task OnInitializedAsync()
    {
        var state = await authenticationStateTask;
        if (state.User?.Identity?.Name != null)
        {
            AvailableMods = await Mediator.Send(new ModsRequest {IncludePrivate = true, UserName = state.User.Identity.Name});
        }
        else
        {
            AvailableMods = await Mediator.Send(new ModsRequest());            
        }
        
    }

    private async Task OnStartBuild()
    {
        /*var timer = new System.Diagnostics.Stopwatch();
        var inputParams = InputParameters.FallbackToDefaults(Parameters.Values);
        var req = new PatchRequest(
            SortedMods
                .ToDictionary(k => k.Key, v => AvailableMods[v.Key])
            ) { PackResult = AutoPack, TemplateInputs = inputParams.ToDictionary()};
        snackbarStack?.Push("Queued mod build!", SnackbarColor.Success);
        this.IsBuilding = true;
        timer.Start();
        var buildResult = await Mediator.Send(req);
        ResultFile = buildResult;
        if (timer.Elapsed.TotalSeconds > 1)
        {
            snackbarStack?.Push("Merged file successfully built!", SnackbarColor.Success);
        }
        timer.Stop();
        IsBuilding = false;*/
    }

    private void OptionChecked(string modFile, bool value)
    {
        switch (value)
        {
            case true when !ModPriority.ContainsKey(modFile):
                ModPriority.Add(modFile, 10);
                
                break;
            case false when ModPriority.ContainsKey(modFile):
                ModPriority.Remove(modFile);
                break;
        }
    }


    public int GetEnabledFileCount
    {
        get
        {
            return ModPriority.Keys.Select(em => AvailableMods[em]).ToFileCount();
        }
    }

    private void OnChangePriority(string modFile, bool decrement)
    {
        var existingPriority = ModPriority[modFile];
        if (decrement)
        {
            existingPriority--;
        }
        else
        {
            existingPriority++;
        }
        ModPriority[modFile] = existingPriority++;
        StateHasChanged();
    }

}