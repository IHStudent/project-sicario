@page "/build"
@using System.IO
@inject IMediator Mediator
@inject IJSRuntime JsRuntime
<h3>Build Merged Mod</h3>
@if (AvailableMods.Any())
{
    <Row>
        <Column ColumnSize="ColumnSize.Is6">
            <Card>
                <CardHeader>Available Mods</CardHeader>
                <CardBody Style="max-height: 60vh;">
                    <CardTitle>Select your mods to build:</CardTitle>
                    @foreach (var (modFile, mod) in AvailableMods)
                    {
                        <Check TValue="bool" CheckedChanged="(v) => OptionChecked(modFile, v)">@mod.GetLabel()</Check>
                    }
                </CardBody>
            </Card>
        </Column>
        @if (ModPriority.Keys.Any())
        {
            <Column ColumnSize="ColumnSize.Is6">
                <Card>
                    <CardHeader>Enabled Mods</CardHeader>
                    <CardBody Style="max-height: 60vh;">
                        <CardText>
                            You have enabled @ModPriority.Keys.Count mods to modify @GetEnabledFileCount files.
                            <ul class="list-group">
                                @foreach (var (enabledFile, priority) in SortedMods)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @AvailableMods[enabledFile].GetLabel() (@Path.GetFileName(enabledFile))
                                        <Tooltip Text="Use the priority to fine-tune the order your mods are applied" Placement="Placement.Left">
                                            <Buttons>
                                                <Button Color="Color.Light" Clicked="() => OnChangePriority(enabledFile, true)"><Icon Name="IconName.AngleUp" /></Button>
                                                @* <Button Style="min-width: 48px;" Disabled="true" Color="Color.Dark"><Text Class="text-muted">@ModPriority[enabledFile]</Text></Button> *@
                                                <Button Color="Color.Light" Clicked="() => OnChangePriority(enabledFile, false)"><Icon Name="IconName.AngleDown" /></Button>
                                            </Buttons>
                                        </Tooltip>
                                    </li>
                                }
                            </ul>
                        </CardText>
                    </CardBody>
                </Card>
            </Column>
        }

    </Row>
    <Row>
        @if (ReadyToBuild)
        {

            <Column ColumnSize="ColumnSize.Is4.Is8.WithOffset">
                <div class="container action-container">
                    <Text Color="TextColor.Muted">Ready to build your mod!</Text>
                    <Check TValue="bool" @bind-Checked="@AutoPack">Automatically pack final mod</Check>
                    @if (IsBuilding)
                    {
                        <LoadingSpinner >
                            <Alert Color="Color.Primary" Visible="true">
                                Currently building your merged file!
                            </Alert>
                        </LoadingSpinner>
                    }
                    else
                    {
                        <Button class="action-btn" Clicked="@OnStartBuild" Color="Color.Primary">Start Build</Button>   
                    }
                    @if (ResultFile != null && ResultFile.Exists)
                    {
                        <FileDownload ResultFile="ResultFile" DeleteAfter="true">
                            Download Merged File
                        </FileDownload>
                    }
                </div>
            </Column>
        }
    </Row>
}
else
{
    <Row Gutter=(32,16)>
        <Column ColumnSize="ColumnSize.Is8.Is2.WithOffset">
            <Container Style="margin-top: 1.5em;">
                <Alert Color="Color.Primary" Visible="true">
                    There are no mods currently available!
                </Alert>
            </Container>
        </Column>
    </Row>  
}


@code {
    private Dictionary<string, Mod> AvailableMods { get; set; } = new Dictionary<string, Mod>();
    private Dictionary<string, int> ModPriority { get; set; } = new Dictionary<string, int>();
        private List<KeyValuePair<string, int>> SortedMods
        {
            get
            {
                return ModPriority.OrderBy(d => d.Value).ToList();
            }
        }
    
    [CascadingParameter(Name = "SnackbarStack")] 
    SnackbarStack snackbarStack { get; set; }

    private FileInfo ResultFile { get; set; }
    private bool ReadyToBuild => this.ModPriority.Keys.Any();
    private bool AutoPack {get;set;} = true;
    private bool IsBuilding { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AvailableMods = await Mediator.Send(new ModsRequest());
    }

    private async Task OnStartBuild()
    {
        var timer = new System.Diagnostics.Stopwatch();
        var req = new PatchRequest(
            SortedMods
                .ToDictionary(k => k.Key, v => AvailableMods[v.Key])
            ) { PackResult = AutoPack};
        snackbarStack?.Push("Queued mod build!", SnackbarColor.Success);
        this.IsBuilding = true;
        timer.Start();
        var buildResult = await Mediator.Send(req);
        ResultFile = buildResult;
        if (timer.Elapsed.TotalSeconds > 1)
        {
            snackbarStack?.Push("Merged file successfully built!", SnackbarColor.Success);
        }
        timer.Stop();
        IsBuilding = false;
    }

    private void OptionChecked(string modFile, bool value)
    {
        switch (value)
        {
            case true when !ModPriority.ContainsKey(modFile):
                ModPriority.Add(modFile, 10);
                break;
            case false when ModPriority.ContainsKey(modFile):
                ModPriority.Remove(modFile);
                break;
        }
    }


    public int GetEnabledFileCount
    {
        get
        {
            return ModPriority.Keys.Select(em => AvailableMods[em]).ToFileCount();
        }
    }

    private void OnChangePriority(string modFile, bool decrement)
    {
        var existingPriority = ModPriority[modFile];
        if (decrement)
        {
            existingPriority--;
        }
        else
        {
            existingPriority++;
        }
        ModPriority[modFile] = existingPriority++;
        StateHasChanged();
    }

}