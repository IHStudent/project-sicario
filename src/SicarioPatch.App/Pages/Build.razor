@page "/build"
@using System.IO
@inject IMediator Mediator
@inject IJSRuntime JsRuntime
@attribute [Authorize(Policy = Policies.IsUser)]
<h3>Build Merged Mod</h3>
@if (AvailableMods.Any())
{
    <Row>
        <Column ColumnSize="ColumnSize.Is6.OnFullHD.Is12.OnWidescreen">
            <ModSelection AvailableMods="@AvailableMods.Values" OnModDisabled="@(mf => SortedMods.AddToOrder(mf, false))" OnModEnabled="@((mf) => SortedMods.AddToOrder(mf, true))" />
        </Column>
        <Column ColumnSize="ColumnSize.Is6.OnFullHD.Is12.OnWidescreen">
            <div class="mod-params">
                <Accordion Style="max-height: 60vh;">
                    @foreach (var paramReqd in SortedMods.Where(m => m.Key.Parameters.Any()))
                    {
                        var paramMod = paramReqd.Key;
                        <Collapse Visible="true">
                            <CollapseHeader>
                                <Text Weight="TextWeight.Bold">@paramMod.GetLabel()</Text>
                                @* <Heading Size="HeadingSize.Is6">@paramMod.GetLabel()</Heading> *@
                            </CollapseHeader>
                            <CollapseBody>
                                @foreach (var param in paramMod.Parameters)
                                {
                                    <ParameterInput @bind-Value="@InputParameters[param.Id]" Parameter="@param" />
                                }
                            </CollapseBody>
                        </Collapse>
                    }
                </Accordion>
            </div>
        </Column>
        </Row>
            <Row>
        @if (SortedMods.Keys.Any())
        {
            <Column ColumnSize="ColumnSize.Is6.OnFullHD.Is8.OnWidescreen.Is12.OnTablet">
                <Card>
                    <CardHeader>Enabled Mods</CardHeader>
                    <CardBody Style="max-height: 60vh;">
                        <CardText>
                            You have enabled @SortedMods.Keys.Count mods to modify @GetEnabledFileCount files.
                            <ModOrder @ref="_loadOrder" Order="SortedMods"></ModOrder>
                        </CardText>
                    </CardBody>
                </Card>
            </Column>
        }

    
        @if (ReadyToBuild)
        {

            <Column ColumnSize="ColumnSize.Is4.Is2.WithOffset.OnFullHD.Is4.OnWidescreen.Is12.OnTablet">
                <BuildAction BuildParameters="@InputParameters" Mods="@SortedMods" />
            </Column>
        }
    </Row>
}
else
{
    <Row Gutter=(32,16)>
        <Column ColumnSize="ColumnSize.Is8.Is2.WithOffset">
            <Container Style="margin-top: 1.5em;">
                <Alert Color="Color.Primary" Visible="true">
                    There are no mods currently available!
                </Alert>
            </Container>
        </Column>
    </Row>  
}


@code {
    private Dictionary<string, WingmanMod> AvailableMods { get; set; } = new Dictionary<string, WingmanMod>();
    // private Dictionary<string, int> ModPriority { get; set; } = new Dictionary<string, int>();
    /*private List<KeyValuePair<string, int>> SortedMods
    {
        get
        {
            return ModPriority.OrderBy(d => d.Value).ToList();
        }
    }*/

    private Dictionary<WingmanMod, int> SortedMods { get; set; } = new Dictionary<WingmanMod, int>();

    private SafeDictionary<string, string> InputParameters { get; set; } = new SafeDictionary<string, string>(string.Empty);
    
    [CascadingParameter(Name = "SnackbarStack")] 
    SnackbarStack snackbarStack { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ModOrder _loadOrder;

    private bool ReadyToBuild => this.SortedMods.Keys.Any();
    /*private FileInfo ResultFile { get; set; }
    private bool AutoPack {get;set;} = true;
    private bool IsBuilding { get; set; }*/

    protected override async Task OnInitializedAsync()
    {
        var state = await authenticationStateTask;
        if (state.User?.Identity?.Name != null)
        {
            AvailableMods = await Mediator.Send(new ModsRequest {IncludePrivate = true, UserName = state.User.Identity.Name});
        }
        else
        {
            AvailableMods = await Mediator.Send(new ModsRequest());            
        }
        
    }
    
    public int GetEnabledFileCount => SortedMods.Keys.ToFileCount();

}