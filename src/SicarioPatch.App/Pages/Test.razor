@page "/test"
@using System.IO
@using System.Timers
@inject ModParser ModParser;
@inject IMediator Mediator
@using BlazorMonaco
@attribute [Authorize(Policy = Policies.IsUser)]
<div class="test-container">
    <div class="test-header-row">
        <DisplayHeading Size="DisplayHeadingSize.Is4">Test Patch File</DisplayHeading>
        <div class="container action-container" style="margin-right: unset;">
            <Alert Color="Color.Secondary" Visible="true">
                You can drop your patch file in the editor to the left. If your mod is valid, you will see the mod details and be able to download the patched files below.
            </Alert>
        </div>
    </div>
    <div class="test-body-row">
        <div class="test-editor-container">
            <MonacoEditor Id="test-editor" CssClass="test-editor" ConstructionOptions="GetEditorOptions" @ref="_editor" OnDidInit="OnEditorInit" OnKeyUp="HandleKeyUp"/>
        </div>
        <div class="test-body-details">
            @if (ParsedMod == null && IsLoading) {
                <LoadingSpinner/>
            }
            @if (!string.IsNullOrWhiteSpace(LastError)) {
                <div class="container action-container test-body-details-item">
                    <Alert Color="Color.Warning" Visible="true">
                        Error encountered loading mod: @LastError
                    </Alert>
                </div>
            }
            @if (ParsedMod != null) {
                @if (ParsedMod.Parameters.Any()) {
                    <div class="test-body-details-item">
                        <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
                            <Items>
                                <Tab Name="params">Parameters</Tab>
                                <Tab Name="modinfo">Mod Info</Tab>
                            </Items>
                            <Content>
                                <TabPanel Name="params">
                                    <ParameterList Mods="@BuildSet" InputParameters="@Parameters"/>
                                </TabPanel>
                                <TabPanel Name="modinfo">
                                    <ModInfo Mod="@ParsedMod" ReadOnly="true"/>
                                </TabPanel>
                            </Content>
                        </Tabs>
                        
                    </div>
                }
                else {
                    <Card Class="test-body-details-item">
                        <CardBody>
                            <ModInfo Mod="@ParsedMod" ReadOnly="true"/>
                        </CardBody>
                    </Card>
                }

                <Card Class="test-body-details-item">
                    <BuildAction Mods="@BuildSet" BuildParameters="@Parameters" />
                </Card>
            }
        </div>
    </div>
</div>

@code {

    [CascadingParameter(Name = "SnackbarStack")]
    SnackbarStack snackbarStack { get; set; }

    private string RawModFile { get; set; }
    private WingmanMod ParsedMod { get; set; }

    private FileInfo ResultFile { get; set; }

    private string LastError { get; set; }
    private System.Timers.Timer aTimer;
    private bool IsLoading { get; set; }

    private List<WingmanMod> BuildSet => ParsedMod == null ? new List<WingmanMod>() : new List<WingmanMod> {ParsedMod};
    private SafeDictionary<string, string> Parameters { get; set; } = new(string.Empty);

    private StandaloneEditorConstructionOptions GetEditorOptions(MonacoEditor editor) {
        return new StandaloneEditorConstructionOptions {
            AutomaticLayout = true,
            AutoIndent = true,
            Language = "json",
            Theme = "vs-dark"
        };
    }
    
    string selectedTab = "params";

    private void OnSelectedTabChanged( string name )
    {
        selectedTab = name;
    }


    protected override async Task OnInitializedAsync() {
        aTimer = new Timer(750);
        aTimer.Elapsed += (source, evt) => OnLoadEditor();
        aTimer.AutoReset = false;
    }

    private async Task TryLoadMod() {
        IsLoading = true;
        LastError = string.Empty;
        if (string.IsNullOrWhiteSpace(RawModFile)) return;
        try {
            if (ModParser.ParseMod(RawModFile) is {FilePatches: { } } jsonMod && (jsonMod.FilePatches.Any() || (jsonMod.AssetPatches != null && jsonMod.AssetPatches.Any()))) {
                jsonMod.Metadata ??= new SetMetadata();
                ParsedMod = jsonMod;
    //snackbarStack?.Push("Successfully loaded mod!", SnackbarColor.Success);
            }
        }
        catch (Exception e) {
            snackbarStack?.Push($"Failed to load mod file!{Environment.NewLine}{e.Message}", SnackbarColor.Danger);
            ParsedMod = null;
            LastError = e.Message;
        }
        IsLoading = false;
        try {
            InvokeAsync(StateHasChanged);
        }
        catch (Exception e) {
            Console.WriteLine(e);
        }
    }

    private async Task OnTextChanged(string arg) {
        if (arg.Any()) {
            await TryLoadMod();
        }
    }

    private async Task OnLoadEditor() {
        ParsedMod = null;
        var rawText = await _editor.GetValue();
        if (!string.IsNullOrWhiteSpace(rawText)) {
            RawModFile = rawText;
            await TryLoadMod();
        }
    }

    private MonacoEditor _editor;

    private void OnEditorInit(MonacoEditorBase obj) {
        Console.WriteLine("Editor init running");
        var mod = new Mod();
        var json = ModParser.ToJson(mod);
        _editor.Layout();
        _editor.SetValue(json);
    }

    private void HandleKeyUp(KeyboardEvent obj) {
        aTimer.Stop();
        aTimer.Start();
    }

}