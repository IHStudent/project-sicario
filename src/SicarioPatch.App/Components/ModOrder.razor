<ul class="list-group">
    @foreach (var (enabledMod, priority) in Order)
    {
        <li class="list-group-item d-flex justify-content-between align-items-center">
            <span>
                @enabledMod.GetLabel()
                @if (enabledMod.GetAllPatches().Any(ps => ps.Type == SubstitutionType.Before))
                {
                    <FadeTooltip Text="This mod might overwrite other mods in your selection, regardless of order">
                        <Icon Name="IconName.ExclamationTriangle"/>
                    </FadeTooltip>
                }
            </span>
            <Tooltip Text="Use the priority to fine-tune the order your mods are applied" Placement="Placement.Left">
                <Buttons>
                    <Button Color="Color.Light" Clicked="() => OnChangePriority(enabledMod, true)"><Icon Name="IconName.AngleUp" /></Button>
                    @* <Button Style="min-width: 48px;" Disabled="true" Color="Color.Dark"><Text Class="text-muted">@ModPriority[enabledFile]</Text></Button> *@
                    <Button Color="Color.Light" Clicked="() => OnChangePriority(enabledMod, false)"><Icon Name="IconName.AngleDown" /></Button>
                </Buttons>
            </Tooltip>
        </li>
    }
</ul>
@code {
    [Parameter]
    public EventCallback<Dictionary<WingmanMod, int>> OrderChanged { get; set; }
    
    [Parameter]
    public Dictionary<WingmanMod, int> Order
    {
        get => _order;
        set
        {
            if (_order == value) return;
            _order = value;
            OrderChanged.InvokeAsync(value);
        }
    }
    
    private Dictionary<WingmanMod, int> _order { get; set; }
    
    private void OnChangePriority(WingmanMod mod, bool decrement)
    {
        var existingPriority = _order[mod];
        if (decrement)
        {
            existingPriority--;
        }
        else
        {
            existingPriority++;
        }
        _order[mod] = existingPriority;
        StateHasChanged();
    }
    
}