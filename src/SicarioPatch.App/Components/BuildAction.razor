@using System.IO
@inject IMediator Mediator
@inject IJSRuntime JsRuntime

<Card>
    <CardHeader><Text Color="TextColor.Muted">Ready to build your mod!</Text></CardHeader>
    <AcceptTerms Mods="Mods.Select(m => m.Key)">
        <CardBody>
            <div class="action-container">
                @if (IsBuilding)
                {
                    <LoadingSpinner >
                        <Alert Color="Color.Primary" Visible="true">
                            Currently building your merged file!
                        </Alert>
                    </LoadingSpinner>
                }
                else
                {
                    <Check TValue="bool" @bind-Checked="@AutoPack">Automatically pack final mod</Check>
                    <div class="form-group" style="margin-top: 0.5em; width: 85%">
                        <label>Enter an (optional) file name</label>
                        <input @bind="FileName" type="text" class="form-control" >
                    </div>
                    @*<Field Style="margin-top: 0.5em; width: 85%;">
                        <FieldLabel>Enter an (optional) file name</FieldLabel>
                        <TextEdit @bind-Text="@FileName" />
                    </Field>*@
                }
            </div>
        </CardBody>
        <CardFooter>
            @if (!IsBuilding || ResultFile == null || !ResultFile.Exists)
            {
                <Button Clicked="@OnStartBuild" Color="Color.Primary">Start Build</Button>
            }
            @if (ResultFile != null && ResultFile.Exists)
            {
                <FileDownload ResultFile="ResultFile" DeleteAfter="true">
                    Download Merged File
                </FileDownload>
                <Button Clicked="@(() => ResultFile.Delete())" Color="Color.Danger"><Icon Name="Blazorise.Icons.Material.MaterialIcons.Refresh" /></Button>
            }
        </CardFooter>
    </AcceptTerms>
</Card>

@code {
    
    private bool AutoPack {get;set;} = true;
    private bool IsBuilding { get; set; }
    private FileInfo ResultFile { get; set; }
    private string FileName { get; set; } = string.Empty;
    
    [CascadingParameter(Name = "SnackbarStack")] 
    SnackbarStack snackbarStack { get; set; }

    [Parameter]
    public Dictionary<string, string> BuildParameters { get; set; } = new Dictionary<string, string>();

    [Parameter]
    public Dictionary<WingmanMod, int> Mods { get; set; } = new Dictionary<WingmanMod, int>();

    private async Task OnStartBuild()
    {
        var timer = new System.Diagnostics.Stopwatch();
        var inputParams = BuildParameters.FallbackToDefaults(GetAllParameters());
        var req = new PatchRequest(
            Mods.OrderBy(k => k.Value).Select(k => k.Key).ToList()
            ) { PackResult = AutoPack, TemplateInputs = inputParams.ToDictionary(), Name = string.IsNullOrWhiteSpace(FileName) ? null : FileName};
        snackbarStack?.Push("Queued mod build!", SnackbarColor.Success);
        this.IsBuilding = true;
        timer.Start();
        var buildResult = await Mediator.Send(req);
        ResultFile = buildResult;
        if (timer.Elapsed.TotalSeconds > 1)
        {
            snackbarStack?.Push("Merged file successfully built!", SnackbarColor.Success);
        }
        timer.Stop();
        IsBuilding = false;
    }

    private IEnumerable<PatchParameter> GetAllParameters()
    {
        return Mods.Keys.SelectMany(m => m.Parameters);
    }
}