<Card>
    <CardHeader>@GetAvailableCount() Available Mods</CardHeader>
    <CardBody Style="max-height: 60vh;">
        <CardTitle>Select your mods to build:</CardTitle>
        @foreach (var (modFile, mod) in AvailableMods.Where(m => string.IsNullOrWhiteSpace(m.Value.Group)))
        {
            <div class="custom-control" @onmouseover="() => OnHover(mod)" @onmouseout="() => OnHover()">
                @if (string.IsNullOrWhiteSpace(mod?.Metadata?.Description))
                {
                    <Check TValue="bool" CheckedChanged="(v) => OptionChecked(modFile, v)">@mod.GetLabel()</Check>
                }
                else
                {
                    <FadeTooltip Text="@mod.Metadata.Description">
                        @* <Tooltip Text="@mod.Metadata.Description" Placement="Placement.Right" Multiline="true" > *@
                        <Check TValue="bool" CheckedChanged="(v) => OptionChecked(modFile, v)">@mod.GetLabel()</Check>    
                        @*</Tooltip>*@
                    </FadeTooltip>
                }
            </div>
        }
        @if (AvailableMods.Where(m => !string.IsNullOrWhiteSpace(m.Value.Group)) is var mods && mods.Any())
        {
            <Accordion Style="margin-top: 1.5em;">
                @foreach (var group in mods.GroupBy(m => m.Value.Group).Where(g => g.Count() > 1))
                {
                    <Collapse Visible="GroupAccordion[group.Key]">
                        <CollapseHeader>
                            <Button style="justify-content: flex-start;" Block="true" Clicked="@(()=>GroupAccordion[group.Key] = !GroupAccordion[group.Key])">@group.Key</Button>
                            @* <Text Weight="TextWeight.Bold">@group.Key</Text> *@
                        </CollapseHeader>
                        <CollapseBody>
                            @foreach (var (modFile, mod) in group)
                            {
                                <div class="custom-control" @onmouseover="() => OnHover(mod)" @onmouseout="() => OnHover()">
                                    <Check TValue="bool" CheckedChanged="(v) => OptionChecked(modFile, v)">@mod.GetLabel()</Check>
                                </div>
                            }
                        </CollapseBody>
                    </Collapse>
                }        
            </Accordion>
        }
        
    </CardBody>
    @* <CardFooter> *@
    @*     @CurrentDescription *@
    @* </CardFooter> *@
</Card>
@code {
    private string CurrentDescription { get; set; } = string.Empty;
    [Parameter]
    public Dictionary<string, WingmanMod> AvailableMods { get; set; } = new Dictionary<string, WingmanMod>();
    
    private SafeDictionary<string, bool> GroupAccordion { get; set; } = new SafeDictionary<string, bool>(false);
    
    [Parameter]
    public EventCallback<string> OnModEnabled { get; set; }
    
    [Parameter]
    public EventCallback<string> OnModDisabled { get; set; }
    
    private void OptionChecked(string modFile, bool value)
    {
        switch (value)
        {
            case true:
                OnModEnabled.InvokeAsync(modFile);
                break;
            case false:
                OnModDisabled.InvokeAsync(modFile);
                break;
        }
    }
    
    private void OnHover(Mod currentMod = null)
    {
        // CurrentDescription = currentMod?.Metadata?.Description ?? string.Empty;
        StateHasChanged();
    }

    private string GetAvailableCount()
    {
        return AvailableMods.Any()
            ? AvailableMods.Keys.Count.ToString()
            : "";
    }
    
}