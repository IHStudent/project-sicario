<Card Style="max-height: inherit; box-sizing: border-box;">
    <CardHeader>@GetAvailableCount() Available Mods</CardHeader>
    <CardBody>
        <CardTitle>Select your mods to build:</CardTitle>
        <Accordion Style="margin-top: 1.5em;">
            <Collapse Visible="@(GroupAccordion["General"])">
                <CollapseHeader>
                    <Button style="justify-content: flex-start;" Block="true" Clicked="@(()=>GroupAccordion["General"] = !GroupAccordion["General"])">General</Button>
                </CollapseHeader>
                <CollapseBody>
                    @foreach (var mod in AvailableMods.Where(m => string.IsNullOrWhiteSpace(m.ModInfo?.Group)))
                    {
                        <div class="custom-control">
                            @if (string.IsNullOrWhiteSpace(mod?.Metadata?.Description))
                            {
                                <Check TValue="bool" CheckedChanged="(v) => OptionChecked(mod, v)">@mod.GetLabel()</Check>
                            }
                            else
                            {
                                <FadeTooltip Text="@mod.Metadata.Description">
                                    <Check TValue="bool" CheckedChanged="(v) => OptionChecked(mod, v)">@mod.GetLabel()</Check>
                                </FadeTooltip>
                            }
                        </div>
                    }
                </CollapseBody>
            </Collapse>
        @if (AvailableMods.Where(m => !string.IsNullOrWhiteSpace(m.ModInfo?.Group)) is var mods && mods.Any())
        {
            
            @foreach (var group in mods.GroupBy(m => m.ModInfo?.Group).Where(g => g.Count() > 1))
            {
                <Collapse Visible="GroupAccordion[group.Key]">
                    <CollapseHeader>
                        <Button style="justify-content: flex-start;" Block="true" Clicked="@(()=>GroupAccordion[group.Key] = !GroupAccordion[group.Key])">@group.Key</Button>
                    </CollapseHeader>
                    <CollapseBody>
                        @foreach (var mod in group)
                        {
                            <div class="custom-control">
                                @if (string.IsNullOrWhiteSpace(mod?.Metadata?.Description))
                                {
                                    <Check TValue="bool" CheckedChanged="(v) => OptionChecked(mod, v)">@mod.GetLabel()</Check>
                                }
                                else
                                {
                                    <FadeTooltip Text="@mod.Metadata.Description">
                                        <Check TValue="bool" CheckedChanged="(v) => OptionChecked(mod, v)">@mod.GetLabel()</Check>
                                    </FadeTooltip>
                                }
                            </div>
                        }
                    </CollapseBody>
                </Collapse>
            }
        }
        </Accordion>
    </CardBody>
</Card>
@code {
    private string CurrentDescription { get; set; } = string.Empty;
    [Parameter]
    public IEnumerable<WingmanMod> AvailableMods { get; set; } = new List<WingmanMod>();
    
    private SafeDictionary<string, bool> GroupAccordion { get; set; } = new SafeDictionary<string, bool>(false);
    
    [Parameter]
    public EventCallback<WingmanMod> OnModEnabled { get; set; }
    
    [Parameter]
    public EventCallback<WingmanMod> OnModDisabled { get; set; }
    
    private void OptionChecked(WingmanMod mod, bool value)
    {
        switch (value)
        {
            case true:
                OnModEnabled.InvokeAsync(mod);
                break;
            case false:
                OnModDisabled.InvokeAsync(mod);
                break;
        }
    }

    private string GetAvailableCount()
    {
        return AvailableMods.Any()
            ? AvailableMods.Count().ToString()
            : "";
    }
}