@using System.IO
@using System.Text.Json
@using Blazorise
@using HexPatch
@inject ModParser ModParser
@if (string.IsNullOrWhiteSpace(RawModFile))
{
    <Container Style="margin-top: 1.5em;">
        <FileEdit Filter=".dtm" Changed="@OnFileChanged"/>
    </Container>
}
else if (ParsedMod != null)
{
    <ModInfo Mod="@ParsedMod" ReadOnly="false" FileName="@FileName" />
    @if (IsLoading)
    {
        <LoadingSpinner />
    }
    else
    {
        <Button Clicked="@SaveMod" Color="Color.Primary" Block="true">Upload your mod</Button>
    }
    
}


@code {
    [CascadingParameter(Name = "SnackbarStack")] SnackbarStack snackbarStack { get; set; }
    private string RawModFile { get; set; }
    private WingmanMod ParsedMod { get; set; }
    private string FileName { get; set;}
    
    private bool IsLoading { get; set; }
    
    
    private async Task OnFileChanged(FileChangedEventArgs ev)
    {
        ParsedMod = null;
        var memStream = new MemoryStream();
        var inFile = ev.Files.FirstOrDefault();
        if (inFile != null)
        {
            await inFile.WriteToStreamAsync(memStream);
            memStream.Position = 0;
            var reader = new StreamReader(memStream);
            var str = await reader.ReadToEndAsync();
            RawModFile = str;
            TryLoadMod(inFile.Name);
        }
    }

    private async Task TryLoadMod(string fileName)
    {
        if (string.IsNullOrWhiteSpace(RawModFile)) return;
        try
        {
            
            if (await Task.Run(() => ModParser.ParseMod(RawModFile)) is { } jsonMod && ModParser.IsValid(jsonMod))
            {
                jsonMod.Metadata ??= new SetMetadata();
                ParsedMod = jsonMod;
                FileName = fileName;
                snackbarStack?.PushAsync("Successfully loaded mod!", SnackbarColor.Success);
            }
        }
        catch (Exception e)
        {
            snackbarStack?.PushAsync($"Failed to load mod file!{Environment.NewLine}{e.Message}", SnackbarColor.Danger);
            Console.WriteLine(e);
            // throw;
            RawModFile = null;
            FileName = null;
        }
    }
    
    private async Task SaveMod()
    {
        IsLoading = true;
        if (ParsedMod != null && OnSaveMod.HasDelegate)
        {
            Console.WriteLine("Running OnSaveMod callback");
            await OnSaveMod.InvokeAsync((FileName, ParsedMod));
            RawModFile = null;
        }
        IsLoading = false;
    }
    
    [Parameter]
    public EventCallback<(string FileName, WingmanMod Mod)> OnSaveMod { get; set; }
}