@if (param != null && !string.IsNullOrWhiteSpace(param.Default)) {
    <Field Horizontal="true">
        <FieldLabel Style="margin-right: 1em;">@param.Message.TrimEnd(':') :</FieldLabel>
        <FieldBody>
            @if (param.Type == ParameterType.String)
            {
                param.Pattern ??= ".*";
                <TextEdit Pattern="@param.Pattern" Placeholder="@param.Default" @bind-Value="@Value" />
            }
            else if (param.Type == ParameterType.Number)
            {
                param.Range ??= "0:2147483647";
                var limit = param.Range.Split(':', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries).Take(2).Select(decimal.Parse).ToList();
                <NumericEdit Min="@limit[0]" Max="@limit[1]" TValue="decimal?" Value="@(decimal.TryParse(Value, out var d) ? d : decimal.Parse(param.Default))" ValueChanged="d => Value = d?.ToString() ?? string.Empty"/>
            } else if (param.Type == ParameterType.Boolean)
            {
                <div style="margin-top: 0.5em;">
                    <Check TValue="bool" CheckedChanged="(v) => Value = v.ToString()" Checked="bool.TryParse(Value, out var b) ? b : bool.TryParse(param.Default, out var d) && d" />    
                </div>
            }
        </FieldBody>
    </Field>
}
@code {

    [Parameter]
    public EventCallback<PatchParameter> ParameterChanged { get; set; }

    [Parameter]
    public PatchParameter Parameter
    {
        get => param;
        set
        {
            if (param == value) return;
            param = value;
            Value = param.Default;
            ParameterChanged.InvokeAsync(value);
        }
    }
    
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    
    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            if (_value == value) return;

            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }
    
    [Parameter]
    public bool IsValid { get; set; }

    private PatchParameter param { get; set; } = new PatchParameter();
    private string _value { get; set; }
}