@if (_param != null && !string.IsNullOrWhiteSpace(_param.Default)) {
    <Field Horizontal="true">
        <FieldLabel Style="margin-right: 1em;">@_param.Message.TrimEnd(':') :</FieldLabel>
        <FieldBody>
            @if (_param.Type == ParameterType.String)
            {
                _param.Pattern ??= ".*";
                <TextEdit Pattern="@_param.Pattern" Placeholder="@_param.Default" @bind-Value="@Value" />
            }
            else if (_param.Type == ParameterType.Number)
            {
                _param.Range ??= "0:2147483647";
                var limit = _param.Range.Split(':', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries).Take(2).Select(decimal.Parse).ToList();
                <NumericEdit Min="@limit[0]" Max="@limit[1]" TValue="decimal?" Value="@(decimal.TryParse(Value, out var d) ? d : decimal.Parse(_param.Default))" ValueChanged="dec => Value = dec?.ToString() ?? string.Empty"/>
            } else if (_param.Type == ParameterType.Boolean)
            {
                <div style="margin-top: 0.5em;">
                    <Check TValue="bool" CheckedChanged="(v) => Value = v.ToString()" Checked="bool.TryParse(Value, out var b) ? b : bool.TryParse(_param.Default, out var d) && d" />    
                </div>
            }
        </FieldBody>
    </Field>
}
@code {
#nullable enable
    [Parameter]
    public EventCallback<PatchParameter> ParameterChanged { get; set; }

    [Parameter]
    public PatchParameter? Parameter
    {
        get => _param;
        set
        {
            if (_param == value) return;
            _param = value;
            Value = _param?.Default;
            ParameterChanged.InvokeAsync(value);
        }
    }
    
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    
    [Parameter]
    public string? Value
    {
        get => _value;
        set
        {
            if (_value == value) return;

            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }
    
    [Parameter]
    public bool IsValid { get; set; }

    private PatchParameter? _param;
    private string? _value;
}