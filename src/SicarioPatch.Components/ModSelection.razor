<Card Style="max-height: inherit; box-sizing: border-box;">
    <CardHeader>@GetAvailableCount() Available Mods</CardHeader>
    <CardBody>
        <CardTitle class="d-flex justify-content-between align-items-center">
            <div>Select your mods to build:</div>
            <div>
                <Check TValue="bool" @bind-Checked="@_includeUnstable">Include Unstable</Check>
            </div>
        </CardTitle>
        <Accordion Style="margin-top: 1.5em;">
            <Collapse Visible="@(GroupAccordion["General"])">
                <CollapseHeader>
                    <Button style="justify-content: flex-start;" Block="true" Clicked="@(() => GroupAccordion["General"] = !GroupAccordion["General"])">General</Button>
                </CollapseHeader>
                <CollapseBody>
                    @foreach (var mod in IncludedMods.Where(m => string.IsNullOrWhiteSpace(m.ModInfo?.Group)))
                    {
                        <ModSelectionItem
                            Mod="mod"
                            OnModChecked="(mod) => OnModEnabled.InvokeAsync(mod)"
                            OnModUnchecked="(mod) => OnModDisabled.InvokeAsync(mod)"/>
                    }
                </CollapseBody>
            </Collapse>
            @if (IncludedMods.Where(m => !string.IsNullOrWhiteSpace(m.ModInfo?.Group)) is var mods && mods.Any())
            {

                @foreach (var group in mods.GroupBy(m => m.ModInfo?.Group).Where(g => g.Count() > 1))
                {
                    <Collapse Visible="GroupAccordion[group.Key]">
                        <CollapseHeader>
                            <Button style="justify-content: flex-start;" Block="true" Clicked="@(() => GroupAccordion[group.Key] = !GroupAccordion[group.Key])">@group.Key</Button>
                        </CollapseHeader>
                        <CollapseBody>
                            @foreach (var mod in group)
                            {
                                <ModSelectionItem
                                    Mod="mod"
                                    OnModChecked="(mod) => OnModEnabled.InvokeAsync(mod)"
                                    OnModUnchecked="(mod) => OnModDisabled.InvokeAsync(mod)"/>
                            }
                        </CollapseBody>
                    </Collapse>
                }
            }
        </Accordion>
    </CardBody>
</Card>
@code {
    private string CurrentDescription { get; set; } = string.Empty;
    [Parameter]
    public IEnumerable<WingmanMod> AvailableMods { get; set; } = new List<WingmanMod>();

    private IEnumerable<WingmanMod> IncludedMods => AvailableMods.Where(m => _includeUnstable || !(m.ModInfo?.Unstable ?? false)).GroupBy(m => m.ModInfo?.Unstable ?? false).SelectMany(mg => mg.ToList());
    
    private SafeDictionary<string, bool> GroupAccordion { get; set; } = new(false);
    
    [Parameter]
    public EventCallback<WingmanMod> OnModEnabled { get; set; }
    
    [Parameter]
    public EventCallback<WingmanMod> OnModDisabled { get; set; }
    
    private bool _includeUnstable { get; set; }
    
    private void OptionChecked(WingmanMod mod, bool value)
    {
        switch (value)
        {
            case true:
                OnModEnabled.InvokeAsync(mod);
                break;
            case false:
                OnModDisabled.InvokeAsync(mod);
                break;
        }
    }

    private string GetAvailableCount()
    {
        return AvailableMods.Any()
            ? AvailableMods.Count().ToString()
            : "";
    }
}